msgid ""
msgstr ""
"Project-Id-Version: Linux From Scratch 11.4\n"
"Report-Msgid-Bugs-To: lfs-dev@lists.linuxfromscratch.org\n"
"POT-Creation-Date: 2024-01-02 21:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Xi Ruoyao <xry111@xry111.site>\n"
"Language-Team: none\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Pootle-Revision: 9999999\n"
"X-Pootle-Path: /zh_CN/lfs/chapter07/kernfs.po\n"
"X-Generator: Translate Toolkit 2.2.5\n"

#. type: Content of: <sect1><title>
#: lfs-en/chapter07/kernfs.xml
msgid "Preparing Virtual Kernel File Systems"
msgstr "准备虚拟内核文件系统"

#. type: Content of: <sect1><indexterm><primary>
#: lfs-en/chapter07/kernfs.xml
msgid "/dev/*"
msgstr "/dev/*"

#. type: Content of: <sect1><para>
#: lfs-en/chapter07/kernfs.xml
msgid ""
"Applications running in userspace utilize various file systems created by "
"the kernel to communicate with the kernel itself. These file systems are "
"virtual: no disk space is used for them. The content of these file systems "
"resides in memory. These file systems must be mounted in the $LFS directory "
"tree so the applications can find them in the chroot environment."
msgstr ""
"用户态程序使用内核创建的一些文件系统和内核通信。这些文件系统是虚拟的：它们并"
"不占用磁盘空间。它们的内容保留在内存中。必须将它们被挂载到 $LFS 目录树中，这"
"样 chroot 环境中的程序才能找到它们。"

#. type: Content of: <sect1><para>
#: lfs-en/chapter07/kernfs.xml
msgid ""
"Begin by creating the directories on which these virtual file systems will "
"be mounted:"
msgstr "首先创建这些文件系统的挂载点："

#. type: Content of: <sect1><screen>
#: lfs-en/chapter07/kernfs.xml
#, no-wrap
msgid "<userinput>mkdir -pv $LFS/{dev,proc,sys,run}</userinput>"
msgstr "<userinput>mkdir -pv $LFS/{dev,proc,sys,run}</userinput>"

#. type: Content of: <sect1><sect2><title>
#: lfs-en/chapter07/kernfs.xml
msgid "Mounting and Populating /dev"
msgstr "挂载和填充 /dev"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter07/kernfs.xml
msgid ""
"During a normal boot of an LFS system, the kernel automatically mounts the "
"<systemitem class=\"filesystem\">devtmpfs</systemitem> file system on the "
"<filename class=\"directory\">/dev</filename> directory; the kernel creates "
"device nodes on that virtual file system during the boot process, or when a "
"device is first detected or accessed. The udev daemon may change the "
"ownership or permissions of the device nodes created by the kernel, and "
"create new device nodes or symlinks, to ease the work of distro maintainers "
"and system administrators.  (See <xref linkend='ch-config-udev-device-node-"
"creation'/> for details.)  If the host kernel supports &devtmpfs;, we can "
"simply mount a &devtmpfs; at <filename class='directory'>$LFS/dev</filename> "
"and rely on the kernel to populate it."
msgstr ""
"在 LFS 系统的正常引导过程中，内核自动挂载 <systemitem "
"class=\"filesystem\">devtmpfs</systemitem> 到 <filename class=\"directory\">/"
"dev</filename>，并在引导过程中，或对应设备被首次发现或访问时动态地创建设备节"
"点。udev 守护程序可能修改内核创建的设备节点的所有者或访问权限，或创建一些新的"
"设备节点或符号链接，以简化发行版维护人员或系统管理员的工作。(详见<xref "
"linkend='ch-config-udev-device-node-creation'/>。) 如果宿主系统支持 "
"&devtmpfs;，我们可以简单地将 &devtmpfs; 挂载到 <filename "
"class='directory'>$LFS/dev</filename> 并依靠内核填充其内容。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter07/kernfs.xml
msgid ""
"But some host kernels lack &devtmpfs; support; these host distros use "
"different methods to create the content of <filename class=\"directory\">/"
"dev</filename>.  So the only host-agnostic way to populate the <filename "
"class=\"directory\">$LFS/dev</filename> directory is by bind mounting the "
"host system's <filename class=\"directory\">/dev</filename> directory. A "
"bind mount is a special type of mount that makes a directory subtree or a "
"file visible at some other location. Use the following command to do this."
msgstr ""
"但是一些宿主系统的内核可能不支持 &devtmpfs;；这些宿主系统使用其他方法填充 "
"<filename class=\"directory\">/dev</filename>。因此，为了在任何宿主系统上都能"
"填充 <filename class=\"directory\">$LFS/dev</filename>，只能绑定挂载宿主系统"
"的 <filename class=\"directory\">/dev</filename> 目录。绑定挂载是一种特殊挂载"
"类型，它允许通过不同的位置访问一个目录树或一个文件。运行以下命令进行绑定挂"
"载："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter07/kernfs.xml
#, no-wrap
msgid "<userinput>mount -v --bind /dev $LFS/dev</userinput>"
msgstr "<userinput>mount -v --bind /dev $LFS/dev</userinput>"

#. type: Content of: <sect1><sect2><title>
#: lfs-en/chapter07/kernfs.xml
msgid "Mounting Virtual Kernel File Systems"
msgstr "挂载虚拟内核文件系统"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter07/kernfs.xml
msgid "Now mount the remaining virtual kernel file systems:"
msgstr "现在挂载其余的虚拟内核文件系统："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter07/kernfs.xml
#, no-wrap
msgid ""
"<userinput>mount -v --bind /dev/pts $LFS/dev/pts\n"
"mount -vt proc proc $LFS/proc\n"
"mount -vt sysfs sysfs $LFS/sys\n"
"mount -vt tmpfs tmpfs $LFS/run</userinput>"
msgstr ""
"<userinput>mount -v --bind /dev/pts $LFS/dev/pts\n"
"mount -vt proc proc $LFS/proc\n"
"mount -vt sysfs sysfs $LFS/sys\n"
"mount -vt tmpfs tmpfs $LFS/run</userinput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter07/kernfs.xml
msgid ""
"In some host systems, <filename>/dev/shm</filename> is a symbolic link to "
"<filename class=\"directory\">/run/shm</filename>.  The /run tmpfs was "
"mounted above so in this case only a directory needs to be created."
msgstr ""
"在某些宿主系统上，<filename>/dev/shm</filename> 是一个指向 <filename "
"class=\"directory\">/run/shm</filename> 的符号链接。我们已经在 /run 下挂载了 "
"tmpfs 文件系统，因此在这里只需要创建一个目录。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/chapter07/kernfs.xml
msgid ""
"In other host systems <filename>/dev/shm</filename> is a mount point for a "
"tmpfs. In that case the mount of /dev above will only create /dev/shm as a "
"directory in the chroot environment. In this situation we must explicitly "
"mount a tmpfs:"
msgstr ""
"在其他宿主系统上，<filename>/dev/shm</filename> 是一个 tmpfs 的挂载点。此时，"
"绑定挂载 /dev 只会在 chroot 环境中生成 /dev/shm 目录。这样，我们必须显式挂载"
"一个 tmpfs："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/chapter07/kernfs.xml
#, fuzzy, no-wrap
#| msgid ""
#| "<userinput>if [ -h $LFS/dev/shm ]; then\n"
#| "  mkdir -pv $LFS/$(readlink $LFS/dev/shm)\n"
#| "else\n"
#| "  mount -t tmpfs -o nosuid,nodev tmpfs $LFS/dev/shm\n"
#| "fi</userinput>"
msgid ""
"<userinput>if [ -h $LFS/dev/shm ]; then\n"
"  (cd $LFS/dev; mkdir $(readlink shm))\n"
"else\n"
"  mount -vt tmpfs -o nosuid,nodev tmpfs $LFS/dev/shm\n"
"fi</userinput>"
msgstr ""
"<userinput>if [ -h $LFS/dev/shm ]; then\n"
"  mkdir -pv $LFS/$(readlink $LFS/dev/shm)\n"
"else\n"
"  mount -t tmpfs -o nosuid,nodev tmpfs $LFS/dev/shm\n"
"fi</userinput>"
