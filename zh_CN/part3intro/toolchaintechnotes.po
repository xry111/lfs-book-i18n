msgid ""
msgstr ""
"Project-Id-Version: Linux From Scratch 11.4\n"
"Report-Msgid-Bugs-To: lfs-dev@lists.linuxfromscratch.org\n"
"POT-Creation-Date: 2025-04-15 20:51+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Xi Ruoyao <xry111@xry111.site>\n"
"Language-Team: none\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Pootle-Revision: 9999999\n"
"X-Pootle-Path: /zh_CN/lfs/part3intro/toolchaintechnotes.po\n"
"X-Generator: Translate Toolkit 2.2.5\n"

#. type: Content of: <sect1><title>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Toolchain Technical Notes"
msgstr "工具链技术说明"

#. type: Content of: <sect1><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"This section explains some of the rationale and technical details behind the "
"overall build method. Don't try to immediately understand everything in this "
"section. Most of this information will be clearer after performing an actual "
"build. Come back and re-read this chapter at any time during the build "
"process."
msgstr ""
"本节综合地解释构建方法中的逻辑和技术细节。不要试图立刻理解本节的所有内容。在"
"实际完成一次系统构建后，可以更容易地理解本节。在整个构建过程中，您随时可以重"
"新阅读本节。"

#. type: Content of: <sect1><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The overall goal of <xref linkend=\"chapter-cross-tools\"/> and <xref "
"linkend=\"chapter-temporary-tools\"/> is to produce a temporary area "
"containing a set of tools that are known to be good, and that are isolated "
"from the host system.  By using the <command>chroot</command> command, the "
"compilations in the remaining chapters will be isolated within that "
"environment, ensuring a clean, trouble-free build of the target LFS system. "
"The build process has been designed to minimize the risks for new readers, "
"and to provide the most educational value at the same time."
msgstr ""
"<xref linkend=\"chapter-cross-tools\"/>和<xref linkend=\"chapter-temporary-"
"tools\"/>的总目标是构造一个临时环境，它包含一组可靠的，能够与宿主系统完全分离"
"的工具。这样，通过使用 <command>chroot</command> 命令，其余各章中执行的命令就"
"被限制在这个临时环境中。这确保我们能够干净、顺利地构建 LFS 系统。整个构建过程"
"被的设计目标是尽量降低新读者可能面临的风险，同时提供尽可能多的教育价值。"

#. type: Content of: <sect1><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"This build process is based on <emphasis>cross-compilation</emphasis>. Cross-"
"compilation is normally used to build a compiler and its associated "
"toolchain for a machine different from the one that is used for the build. "
"This is not strictly necessary for LFS, since the machine where the new "
"system will run is the same as the one used for the build. But cross-"
"compilation has one great advantage: anything that is cross-compiled cannot "
"depend on the host environment."
msgstr ""
"构建过程是基于<emphasis>交叉编译</emphasis>过程的。交叉编译通常被用于为一台与"
"本机完全不同的计算机构建编译器及其工具链。这对于 LFS 并不严格必要，因为新系统"
"运行的机器就是构建它时使用的。但是，交叉编译拥有一项重要优势：任何交叉编译产"
"生的程序都不可能依赖于宿主环境。"

#. type: Content of: <sect1><sect2><title>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "About Cross-Compilation"
msgstr "关于交叉编译"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The LFS book is not (and does not contain) a general tutorial to build a "
"cross- (or native) toolchain. Don't use the commands in the book for a cross-"
"toolchain for some purpose other than building LFS, unless you really "
"understand what you are doing."
msgstr ""
"LFS 手册并不是 (也不包含) 一份通用的，构建交叉 (或本地) 工具链的指南。除非您"
"完全明白自己在干什么，请勿使用手册中的命令构建交叉工具链并用于构建 LFS 以外的"
"用途。"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"It's known installing GCC pass 2 will break the cross-toolchain.  We don't "
"consider it a bug because GCC pass 2 is the last package to be cross-"
"compiled in the book, and we won't <quote>fix</quote> it until we really "
"need to cross-compile some package after GCC pass 2 in the future."
msgstr ""
"已知安装第二遍的 GCC 会破坏交叉工具链。我们认为这并不是 bug，因为第二遍的 "
"GCC 是本书中最后一个交叉编译的软件包，因此除非在未来我们确实需要在第二遍的 "
"GCC 之后交叉编译某个软件包，我们不会<quote>修复</quote>这个问题。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Cross-compilation involves some concepts that deserve a section of their "
"own. Although this section may be omitted on a first reading, coming back to "
"it later will help you gain a fuller understanding of the process."
msgstr ""
"交叉编译涉及一些概念，值得专门用一节讨论。尽管您可以在初次阅读时跳过本节，但"
"在之后重新阅读本节，能帮助您更全面地理解构建过程。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Let us first define some terms used in this context."
msgstr "首先我们定义讨论交叉编译时常用的术语。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "The build"
msgstr "build"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"is the machine where we build programs. Note that this machine is also "
"referred to as the <quote>host.</quote>"
msgstr ""
"指构建程序时使用的机器。注意在某些其他章节，这台机器被称为<quote>host</"
"quote>(宿主)。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "The host"
msgstr "host"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"is the machine/system where the built programs will run. Note that this use "
"of <quote>host</quote> is not the same as in other sections."
msgstr ""
"指将来会运行被构建的程序的机器。注意这里说的<quote>host</quote>与其他章节使用"
"的“宿主”(host) 一词不同。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "The target"
msgstr "target"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"is only used for compilers. It is the machine the compiler produces code "
"for. It may be different from both the build and the host."
msgstr ""
"只有编译器使用这个术语。编译器为这台机器产生代码。它可能和 build 与 host 都不"
"同。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"As an example, let us imagine the following scenario (sometimes referred to "
"as <quote>Canadian Cross</quote>). We have a compiler on a slow machine "
"only, let's call it machine A, and the compiler ccA. We also have a fast "
"machine (B), but no compiler for (B), and we want to produce code for a "
"third, slow machine (C). We will build a compiler for machine C in three "
"stages."
msgstr ""
"例如，我们考虑下列场景 (有时称为<quote>Canadian Cross</quote>)。我们仅在一台"
"运行缓慢的机器上有编译器，称这台机器为 A，这个编译器为 ccA。我们还有一台运行"
"较快的机器 (B)，但它没有安装编译器，而我们希望为另一台缓慢的机器 (C) 生成代"
"码。如果要为 C 构建编译器，可以通过三个阶段完成："

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Stage"
msgstr "阶段"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Build"
msgstr "Build"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Host"
msgstr "Host"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Target"
msgstr "Target"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Action"
msgstr "操作描述"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "1"
msgstr "1"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "A"
msgstr "A"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "B"
msgstr "B"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Build cross-compiler cc1 using ccA on machine A."
msgstr "在机器 A 上，使用 ccA 构建交叉编译器 cc1"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "2"
msgstr "2"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "C"
msgstr "C"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Build cross-compiler cc2 using cc1 on machine A."
msgstr "在机器 A 上，使用 cc1 构建交叉编译器 cc2"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "3"
msgstr "3"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Build compiler ccC using cc2 on machine B."
msgstr "在机器 B 上，使用 cc2 构建交叉编译器 ccC"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Then, all the programs needed by machine C can be compiled using cc2 on the "
"fast machine B. Note that unless B can run programs produced for C, there is "
"no way to test the newly built programs until machine C itself is running. "
"For example, to run a test suite on ccC, we may want to add a fourth stage:"
msgstr ""
"这样，我们可以为机器 C 使用 cc2 在快速的机器 B 上构建所有其他程序。需要注意的"
"是，除非 B 能运行为 C 编译的程序，则在 C 上实际运行它们之前，无法测试它们的功"
"能。例如，如果要测试 ccC，我们可能需要增加第四个阶段："

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "4"
msgstr "4"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Rebuild and test ccC using ccC on machine C."
msgstr "在机器 C 上，用 ccC 重新构建它本身，并测试"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"In the example above, only cc1 and cc2 are cross-compilers, that is, they "
"produce code for a machine different from the one they are run on.  The "
"other compilers ccA and ccC produce code for the machine they are run on. "
"Such compilers are called <emphasis>native</emphasis> compilers."
msgstr ""
"在上面的例子中，只有 cc1 和 cc2 是交叉编译器，它们为与它们本身运行的机器不同"
"的机器产生代码。而另外的编译器 ccA 和 ccC 为它们本身运行的机器产生代码，它们"
"称为<emphasis>本地</emphasis>编译器。"

#. type: Content of: <sect1><sect2><title>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Implementation of Cross-Compilation for LFS"
msgstr "LFS 的交叉编译实现"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"All the cross-compiled packages in this book use an autoconf-based building "
"system.  The autoconf-based building system accepts system types in the form "
"cpu-vendor-kernel-os, referred to as the system triplet.  Since the vendor "
"field is often irrelevant, autoconf lets you omit it."
msgstr ""
"本书中涉及交叉编译的软件包都使用基于 autoconf 的构建系统。基于 autoconf 的构"
"建系统使用形如 CPU-供应商-内核-操作系统，称为三元组的名称表示目标系统类型。由"
"于供应商字段通常无关紧要，autoconf 允许省略它。"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"An astute reader may wonder why a <quote>triplet</quote> refers to a four "
"component name. The kernel field and the os field began as a single "
"<quote>system</quote> field.  Such a three-field form is still valid today "
"for some systems, for example, <literal>x86_64-unknown-freebsd</literal>.  "
"But two systems can share the same kernel and still be too different to use "
"the same triplet to describe them.  For example, Android running on a mobile "
"phone is completely different from Ubuntu running on an ARM64 server, even "
"though they are both running on the same type of CPU (ARM64) and using the "
"same kernel (Linux)."
msgstr ""
"好奇的读者可能会问，为什么一个<quote>三元组</quote>却包含四个部分。这是由于内"
"核和操作系统两个字段起源于一个<quote>系统</quote>字段。至今，一些系统仍然用三"
"字段的格式准确描述，例如，<literal>x86_64-unknown-freebsd</literal>。但是对于"
"其他一些系统，即使两个系统使用相同的内核，它们也可能截然不同，以至于不能使用"
"相同的三元组。例如，运行在智能手机的 Android 和运行在 ARM64 服务器的 Ubuntu "
"完全不同，尽管它们使用相同类型的 CPU (ARM64) 和相同的内核 (Linux)。"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Without an emulation layer, you cannot run an executable for a server on a "
"mobile phone or vice versa.  So the <quote>system</quote> field has been "
"divided into kernel and os fields, to designate these systems "
"unambiguously.  In our example, the Android system is designated "
"<literal>aarch64-unknown-linux-android</literal>, and the Ubuntu system is "
"designated <literal>aarch64-unknown-linux-gnu</literal>."
msgstr ""
"在没有仿真中间层的情况下，显然不能在智能手机上运行用于服务器的可执行文件，反"
"之亦然。因此，<quote>系统</quote> 字段被拆分为内核和操作系统两部分，以准确区"
"分这些系统。对于本例，Android 被表示为 <literal>aarch64-unknown-linux-"
"android</literal>，而 Ubuntu 被表示为 <literal>aarch64-unknown-linux-gnu</"
"literal>。"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The word <quote>triplet</quote> remains embedded in the lexicon. A simple "
"way to determine your system triplet is to run the <command>config.guess</"
"command> script that comes with the source for many packages. Unpack the "
"binutils sources, run the script <userinput>./config.guess</userinput>, and "
"note the output. For example, for a 32-bit Intel processor the output will "
"be <emphasis>i686-pc-linux-gnu</emphasis>. On a 64-bit system it will be "
"<emphasis>x86_64-pc-linux-gnu</emphasis>. On most Linux systems the even "
"simpler <command>gcc -dumpmachine</command> command will give you similar "
"information."
msgstr ""
"<quote>三元组</quote>这个词汇被沿用下来。有一种简单方法可以获得您的机器的三元"
"组，即运行许多软件包附带的 <command>config.guess</command> 脚本。解压缩 "
"binutils 源码，然后输入 <userinput>./config.guess</userinput> 运行脚本，并观"
"察输出。例如，对于 32 位 Intel 处理器，输出应该是 <emphasis>i686-pc-linux-"
"gnu</emphasis>。而在 64 位系统上输出应该是 <emphasis>x86_64-pc-linux-gnu</"
"emphasis>。在许多 Linux 系统上，更简单的 <command>gcc -dumpmachine</command> "
"命令也会输出类似的信息。"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"You should also be aware of the name of the platform's dynamic linker, often "
"referred to as the dynamic loader (not to be confused with the standard "
"linker <command>ld</command> that is part of binutils). The dynamic linker "
"provided by package glibc finds and loads the shared libraries needed by a "
"program, prepares the program to run, and then runs it. The name of the "
"dynamic linker for a 32-bit Intel machine is <filename "
"class=\"libraryfile\">ld-linux.so.2</filename>; it's <filename "
"class=\"libraryfile\">ld-linux-x86-64.so.2</filename> on 64-bit systems. A "
"sure-fire way to determine the name of the dynamic linker is to inspect a "
"random binary from the host system by running: <userinput>readelf -l "
"&lt;name of binary&gt; | grep interpreter</userinput> and noting the output. "
"The authoritative reference covering all platforms is in <ulink url='https://"
"sourceware.org/glibc/wiki/ABIList'>a Glibc wiki page</ulink>."
msgstr ""
"您还需要注意平台的动态链接器的名称，它又被称为动态加载器 (不要和 Binutils 中"
"的普通链接器 <command>ld</command> 混淆)。动态链接器由 Glibc 提供，它寻找并加"
"载程序所需的共享库，为程序运行做好准备，然后运行程序。在 32 位 Intel 机器上动"
"态链接器的名称是 <filename class=\"libraryfile\">ld-linux.so.2</filename> "
"(在 64 位系统上是 <filename class=\"libraryfile\">ld-linux-x86-64.so.2</"
"filename>)。为了准确确定动态链接器名称，可以从宿主系统找一个二进制可执行文"
"件，然后执行：<userinput>readelf -l &lt;二进制文件名&gt; | grep interpreter</"
"userinput> 并观察输出。可以在 <ulink url='https://sourceware.org/glibc/wiki/"
"ABIList'>Glibc wiki 页面</ulink>找到包含所有平台的权威参考。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "There are two key points for a cross-compilation:"
msgstr "在进行交叉编译时需要注意两个关键问题："

#. type: Content of: <sect1><sect2><itemizedlist><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"When producing and processing the machine code supposed to be executed on "
"<quote>the host,</quote> the cross-toolchain must be used.  Note that the "
"native toolchain from <quote>the build</quote> may be still invoked to "
"generate machine code supposed to be executed on <quote>the build.</quote> "
"For example, the build system may compile a generator with the native "
"toolchain, then generate a C source file with the generator, and finally "
"compile the C source file with the cross-toolchain so the generated code "
"will be able to run on <quote>the host.</quote>"
msgstr ""
"在生成和处理应该在 host 执行的机器码时，必须使用交叉工具链。注意构建过程仍然"
"可能调用 build 的本地工具链以生成应该在 build 执行的机器码，例如构建系统可能"
"首先用本地工具链编译一个生成器，然后用该生成器生成一个 C 源代码文件，最后再用"
"交叉工具链编译生成的代码，使其能在 host 运行。"

#. type: Content of: <sect1><sect2><itemizedlist><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"With an autoconf-based build system, this requirement is ensured by using "
"the <parameter>--host</parameter> switch to specify <quote>the host</quote> "
"triplet.  With this switch the build system will use the toolchain "
"components prefixed with <literal>&host-triplet;</literal> for generating "
"and processing the machine code for <quote>the host</quote>; e.g. the "
"compiler will be <command>&host-triplet;-gcc</command> and the "
"<command>readelf</command> tool will be <command>&host-triplet;-readelf</"
"command>."
msgstr ""
"在使用基于 autoconf 的构建系统时，可以通过 <parameter>--host</parameter> 选项"
"指定 host 三元组以满足上述需求。该选项使得构建系统使用带有 <literal>&host-"
"triplet;</literal> (host 三元组) 前缀的工具链组件生成和处理用于 host 的机器"
"码；例如，使用 <command>&host-triplet;-gcc</command> 作为编译器，使用 "
"<command>&host-triplet;-readelf</command> 作为 <command>readelf</command> 工"
"具。"

#. type: Content of: <sect1><sect2><itemizedlist><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The build system should not attempt to run any generated machine code "
"supposed to be executed on <quote>the host.</quote> For example, when "
"building a utility natively, its man page can be generated by running the "
"utility with the <parameter>--help</parameter> switch and processing the "
"output, but generally it's not possible to do so for a cross-compilation as "
"the utility may fail to run on <quote>the build</quote>: it's obviously "
"impossible to run ARM64 machine code on a x86 CPU (without an emulator)."
msgstr ""
"构建系统不应试图执行任何应该在 host 运行的机器码。例如，在本地编译某个工具"
"时，可能通过运行它并传递 <parameter>--help</parameter> 选项，再处理其输出以生"
"成它的手册页，但在交叉编译时通常不能这么做，因为该工具可能根本无法在 build 运"
"行：显然不可能在 x86 CPU 上运行 ARM64 机器码 (如果没有模拟器的话)。"

#. type: Content of: <sect1><sect2><itemizedlist><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"With an autoconf-based build system, this requirement is satisfied in "
"<quote>the cross-compilation mode</quote> where the optional features "
"requiring to run machine code for <quote>the host</quote> during the build "
"time are disabled.  When <quote>the host</quote> triplet is explicitly "
"specified, <quote>the cross-compilation mode</quote> is enabled if and only "
"if either the <command>configure</command> script fails to run a dummy "
"program compiled into <quote>the host</quote> machine code, or <quote>the "
"build</quote> triplet is explicitly specified via the <parameter>--build</"
"parameter> switch and it's different from <quote>the host</quote> triplet."
msgstr ""
"在使用基于 autoconf 的构建系统时，可以通过所谓的<quote>交叉编译模式</quote>满"
"足这一需求，在此模式下需要在构建时运行为 host 编译的机器码的可选功能会被全部"
"禁用。在显式指定了 host 三元组的情况下，<quote>交叉编译模式</quote>当且仅当 "
"<command>configure</command> 无法运行已经为 host 编译的样品程序，或通过 "
"<parameter>--build</parameter> 显式指定了和 host 三元组不同的 build 三元组时"
"被启用。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"In order to cross-compile a package for the LFS temporary system, the name "
"of the system triplet is slightly adjusted by changing the "
"&quot;vendor&quot; field in the <envar>LFS_TGT</envar> variable so it says "
"&quot;lfs&quot; and <envar>LFS_TGT</envar> is then specified as <quote>the "
"host</quote> triplet via <parameter>--host</parameter>, so the cross-"
"toolchain will be used for generating and processing the machine code "
"running as a part of the LFS temporary system.  And, we also need to enable "
"<quote>the cross-compilation mode</quote>: despite <quote>the host</quote> "
"machine code, i.e. the machine code for the LFS temporary system, is able to "
"execute on the current CPU, it may refer to a library not available on the "
"<quote>the build</quote> (the host distro), or some code or data non-exist "
"or defined differently in the library even if it happens to be available.  "
"When cross-compiling a package for the LFS temporary system, we cannot rely "
"on the <command>configure</command> script to detect this issue with the "
"dummy program: the dummy only uses a few components in <systemitem "
"class='library'>libc</systemitem> that the host distro <systemitem "
"class='library'>libc</systemitem> likely provides (unless, maybe the host "
"distro uses a different <systemitem class='library'>libc</systemitem> "
"implementation like Musl), so it won't fail like how the really useful "
"programs would likely.  Thus we must explicitly specify <quote>the build</"
"quote> triplet to enable <quote>the cross-compilation mode.</quote> The "
"value we use is just the default, i.e. the original system triplet from "
"<command>config.guess</command> output, but <quote>the cross-compilation "
"mode</quote> depends on an explicit specification as we've discussed."
msgstr ""
"为了为 LFS 临时系统交叉编译软件包，首先微调系统三元组，将其"
"&quot;vendor&quot; 字段改为 &quot;lfs&quot; 后写入<envar>LFS_TGT</envar> 环境"
"变量，并将该变量值通过 <parameter>--host</parameter> 指定为 host 三元组，这样"
"在生成和处理作为 LFS 临时系统一部分的机器码时，构建系统就会使用交叉工具链。此"
"外，我们还需要启用<quote>交叉编译模式</quote>：host，即 LFS 临时系统所用的机"
"器码尽管能够在当前 CPU 上运行，却可能使用 build (宿主发行版) 没有提供的库；即"
"使库恰好存在，这些机器码也可能使用不存在或定义不同的代码或数据。在为 LFS 临时"
"系统进行交叉编译时，我们不能期望 <command>configure</command> 通过运行样品程"
"序来检测这一问题：样品程序只引用 <systemitem class='library'>libc</"
"systemitem> 中的少数组件，而宿主发行版的 <systemitem class='library'>libc</"
"systemitem> 很可能提供了这些组件 (或许，除非在宿主发行版使用了不同的 "
"<systemitem class='library'>libc</systemitem> 实现，如 Musl)，故样品程序不会"
"像那些真正有功能的程序大概会发生的一样运行失败。故我们必须显式指定 build 三元"
"组，以启用<quote>交叉编译模式</quote>。我们指定的三元组就是默认值，即 "
"<command>config.guess</command> 输出的，未经修改的系统三元组，但正如前文所"
"述，<quote>交叉编译模式</quote>依赖于是否显式指定了该三元组。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"We use the <parameter>--with-sysroot</parameter> option when building the "
"cross-linker and cross-compiler, to tell them where to find the needed files "
"for <quote>the host.</quote> This nearly ensures that none of the other "
"programs built in <xref linkend=\"chapter-temporary-tools\"/> can link to "
"libraries on <quote>the build.</quote> The word <quote>nearly</quote> is "
"used because <command>libtool</command>, a <quote>compatibility</quote> "
"wrapper of the compiler and the linker for autoconf-based build systems, can "
"try to be too clever and mistakenly pass options allowing the linker to find "
"libraries of <quote>the build.</quote> To prevent this fallout, we need to "
"delete the libtool archive (<filename class='extension'>.la</filename>) "
"files and fix up an outdated libtool copy shipped with the Binutils code."
msgstr ""
"在构建交叉链接器和交叉编译器时，我们指定 <parameter>--with-sysroot</"
"parameter> 选项，以告知它们应该在何处搜索为 host 生成代码所需的文件。这几乎保"
"证了<xref linkend=\"chapter-temporary-tools\"/>中构建的其他程序不会连接到 "
"build 中的库。这里使用<quote>几乎</quote>这个词是因为 <command>libtool</"
"command>，一个包装编译器和链接器的<quote>兼容层</quote>，可能自作聪明地传递一"
"些导致链接器能找到 build 库的选项。为了防止这一问题，我们需要删除 libtool 档"
"案 (<filename class='extension'>.la</filename>) 文件，并修复 Binutils 代码随"
"附的过时的 libtool 副本。"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "pc"
msgstr "pc"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "lfs"
msgstr "lfs"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Build cross-compiler cc1 using cc-pc on pc."
msgstr "在 pc 上使用 cc-pc 构建交叉编译器 cc1"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Build compiler cc-lfs using cc1 on pc."
msgstr "在 pc 上使用 cc1 构建 cc-lfs"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Rebuild (and maybe test) cc-lfs using cc-lfs on lfs."
msgstr "在 lfs 上使用 cc-lfs 重新构建 (同时可以测试) 它本身"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"In the preceding table, <quote>on pc</quote> means the commands are run on a "
"machine using the already installed distribution. <quote>On lfs</quote> "
"means the commands are run in a chrooted environment."
msgstr ""
"在上表中，<quote>在 pc 上</quote> 意味着命令在已经安装好的发行版中执行。"
"<quote>在 lfs 上</quote> 意味着命令在 chroot 环境中执行。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"This is not yet the end of the story. The C language is not merely a "
"compiler; it also defines a standard library. In this book, the GNU C "
"library, named glibc, is used (there is an alternative, &quot;musl&quot;). "
"This library must be compiled for the LFS machine; that is, using the cross-"
"compiler cc1.  But the compiler itself uses an internal library providing "
"complex subroutines for functions not available in the assembler instruction "
"set. This internal library is named libgcc, and it must be linked to the "
"glibc library to be fully functional. Furthermore, the standard library for "
"C++ (libstdc++) must also be linked with glibc. The solution to this chicken "
"and egg problem is first to build a degraded cc1-based libgcc, lacking some "
"functionalities such as threads and exception handling, and then to build "
"glibc using this degraded compiler (glibc itself is not degraded), and also "
"to build libstdc++. This last library will lack some of the functionality of "
"libgcc."
msgstr ""
"现在，关于交叉编译，还有更多要处理的问题：C 语言并不仅仅是一个编译器；它还规"
"定了一个标准库。在本书中，我们使用 GNU C 运行库，即 glibc (除此之外，还有名"
"为 &quot;musl&quot; 的另一种 C 运行库实现)。它必须为 lfs 目标机器使用交叉编译"
"器 cc1 编译。但是，编译器本身使用一个库，实现汇编指令集并不支持的一些复杂指"
"令。这个内部库称为 libgcc，它必须链接到 glibc 库才能实现完整功能。另外，C++ "
"标准库 (libstdc++) 也必须链接到 glibc。为了解决这个”先有鸡还是先有蛋“的问题，"
"只能先构建一个降级的 cc1，它的 libgcc 缺失线程和异常等功能，再用这个降级的编"
"译器构建 glibc (这不会导致 glibc 缺失功能)，再构建 libstdc++。但是这种方法构"
"建的 libstdc++ 会缺失一些依赖于 libgcc 的功能。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The upshot of the preceding paragraph is that cc1 is unable to build a fully "
"functional libstdc++ with the degraded libgcc, but cc1 is the only compiler "
"available for building the C/C++ libraries during stage 2.  As we've "
"discussed, we cannot run cc-lfs on pc (the host distro) because it may "
"require some library, code, or data not available on <quote>the build</"
"quote> (the host distro).  So when we build gcc stage 2, we override the "
"library search path to link libstdc++ against the newly rebuilt libgcc "
"instead of the old, degraded build.  This makes the rebuilt libstdc++ fully "
"functional."
msgstr ""
"上一自然段的结论是 cc1 无法使用功能降级的 libgcc 构建功能完整的 libstdc++，但"
"这是我们在阶段 2 构建 C/C++ 库时唯一可用的编译器。如同前文所述，我们不能在 "
"pc (宿主发行版) 运行 cc-lfs，因为它可能使用 build (宿主发行版) 未提供的库，代"
"码，或数据。因此在构建第二阶段的 gcc 时，我们覆盖库文件搜索路径，以将 "
"libstdc++ 链接到刚刚重新构建的 libgcc，而不是旧的，功能降级的版本。这样重新构"
"建的 libstdc++ 就会具有完整的功能。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"In &ch-final; (or <quote>stage 3</quote>), all the packages needed for the "
"LFS system are built. Even if a package has already been installed into the "
"LFS system in a previous chapter, we still rebuild the package.  The main "
"reason for rebuilding these packages is to make them stable: if we reinstall "
"an LFS package on a completed LFS system, the reinstalled content of the "
"package should be the same as the content of the same package when first "
"installed in &ch-final;.  The temporary packages installed in &ch-tmp-cross; "
"or &ch-tmp-chroot; cannot satisfy this requirement, because some optional "
"features of them are disabled because of either the missing dependencies or "
"the <quote>cross-compilation mode.</quote> Additionally, a minor reason for "
"rebuilding the packages is to run the test suites."
msgstr ""
"在&ch-final; (或者也可以称为“第三阶段”) 中，我们会构建 LFS 需要的所有软件包。"
"即使某个软件包在之前的章节已被构建，我们仍然重新构建它。重新构建的最主要原因"
"是将软件包稳定下来：如果我们在完整的 LFS 系统上重新安装一个 LFS 软件包，则重"
"新安装到系统中的内容应该和&ch-final;中初次安装的完全一致。&ch-tmp-cross;和"
"&ch-tmp-chroot;中的临时软件包无法满足这一条件，因为它们的一些可选功能由于缺失"
"依赖或使用<quote>交叉编译模式</quote>而被禁用。另外，进行重新构建还有一个次要"
"原因，即运行软件包的测试套件。"

#. type: Content of: <sect1><sect2><title>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Other Procedural Details"
msgstr "构建过程的其他细节"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The cross-compiler will be installed in a separate <filename "
"class=\"directory\">$LFS/tools</filename> directory, since it will not be "
"part of the final system."
msgstr ""
"交叉编译器会被安装在独立的 <filename class=\"directory\">$LFS/tools</"
"filename> 目录，因为它不属于最终构建的系统。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Binutils is installed first because the <command>configure</command> runs of "
"both gcc and glibc perform various feature tests on the assembler and linker "
"to determine which software features to enable or disable. This is more "
"important than one might realize at first. An incorrectly configured gcc or "
"glibc can result in a subtly broken toolchain, where the impact of such "
"breakage might not show up until near the end of the build of an entire "
"distribution. A test suite failure will usually highlight this error before "
"too much additional work is performed."
msgstr ""
"我们首先安装 Binutils。这是由于 GCC 和 Glibc 的 <command>configure</command> "
"脚本首先测试汇编器和链接器的一些特性，以决定启用或禁用一些软件特性。初看起来"
"这并不重要，但没有正确配置的 GCC 或者 Glibc 会导致工具链中潜伏的故障。这些故"
"障可能到整个构建过程快要结束时才突然爆发，不过在花费大量无用功之前，测试套件"
"的失败通常可以将这类错误暴露出来。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Binutils installs its assembler and linker in two locations, <filename "
"class=\"directory\">$LFS/tools/bin</filename> and <filename "
"class=\"directory\">$LFS/tools/$LFS_TGT/bin</filename>. The tools in one "
"location are hard linked to the other. An important facet of the linker is "
"its library search order. Detailed information can be obtained from "
"<command>ld</command> by passing it the <parameter>--verbose</parameter> "
"flag. For example, <command>$LFS_TGT-ld --verbose | grep SEARCH</command> "
"will illustrate the current search paths and their order. (Note that this "
"example can be run as shown only while logged in as user <systemitem "
"class=\"username\">lfs</systemitem>. If you come back to this page later, "
"replace <command>$LFS_TGT-ld</command> with <command>ld</command>)."
msgstr ""
"Binutils 将汇编器和链接器安装在两个位置，一个是 <filename "
"class=\"directory\">$LFS/tools/bin</filename>，另一个是 <filename "
"class=\"directory\">$LFS/tools/$LFS_TGT/bin</filename>。这两个位置中的工具互"
"为硬链接。链接器的一项重要属性是它搜索库的顺序，通过向 <command>ld</command> "
"命令加入 <parameter>--verbose</parameter> 参数，可以得到关于搜索路径的详细信"
"息。例如，<command>ld --verbose | grep SEARCH</command> 会输出当前的搜索路径"
"及其顺序。(注意这条命令只有在以 <systemitem class=\"username\">lfs</"
"systemitem> 用户身份操作时才能正常工作。如果在阅读后续章节的过程中复习这里的"
"内容，可能需要将 <command>$LFS_TGT-ld</command> 替换为 <command>ld</"
"command>。)"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The next package installed is gcc. An example of what can be seen during its "
"run of <command>configure</command> is:"
msgstr ""
"下一步安装 GCC。在执行它的 <command>configure</command> 脚本时，您会看到类似"
"下面这样的输出："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/part3intro/toolchaintechnotes.xml
#, no-wrap
msgid ""
"<computeroutput>checking what assembler to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/as\n"
"checking what linker to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/ld</computeroutput>"
msgstr ""
"<computeroutput>checking what assembler to use... /tools/i686-lfs-linux-gnu/bin/as\n"
"checking what linker to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/ld</computeroutput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"This is important for the reasons mentioned above. It also demonstrates that "
"gcc's configure script does not search the PATH directories to find which "
"tools to use. However, during the actual operation of <command>gcc</command> "
"itself, the same search paths are not necessarily used. To find out which "
"standard linker <command>gcc</command> will use, run: <command>$LFS_TGT-gcc "
"-print-prog-name=ld</command>. (Again, remove the <command>$LFS_TGT-</"
"command> prefix if coming back to this later.)"
msgstr ""
"基于我们上面论述的原因，这些输出非常重要。这也说明 gcc 的配置脚本没有在 PATH "
"变量指定的目录中搜索工具。然而，在 <command>gcc</command> 的实际运行中，未必"
"会使用同样的搜索路径。为了查询 <command>gcc</command> 会使用哪个链接器，需要"
"执行以下命令：<command>$LFS_TGT-gcc -print-prog-name=ld</command>。(同样，如"
"果在阅读后续章节的过程中复习这里的内容，可能需要移除命令中的 "
"<command>$LFS_TGT-</command> 前缀。)"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Detailed information can be obtained from <command>gcc</command> by passing "
"it the <parameter>-v</parameter> command line option while compiling a "
"program. For example, <command>$LFS_TGT-gcc -v <replaceable>example.c</"
"replaceable></command> (or without <command> $LFS_TGT-</command> if coming "
"back later) will show detailed information about the preprocessor, "
"compilation, and assembly stages, including <command>gcc</command>'s search "
"paths for included headers and their order."
msgstr ""
"通过向 <command>gcc</command> 传递 <parameter>-v</parameter> 参数，可以知道在"
"编译程序时发生的细节。例如，<command>$LFS_TGT-gcc -v <replaceable>example.c</"
"replaceable></command> (如果在复习这里的内容，可能需要移除 "
"<command>$LFS_TGT</command>) 会输出预处理、编译和汇编阶段中的详细信息，包括 "
"<command>gcc</command> 的包含文件搜索路径和顺序。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Next up: sanitized Linux API headers. These allow the standard C library "
"(glibc) to interface with features that the Linux kernel will provide."
msgstr ""
"下一个步骤是：安装“净化的” (sanitized) Linux API 头文件。这些头文件允许 C 标"
"准库 (glibc) 与 Linux 内核提供的各种特性交互。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Next comes glibc. This is the first package that we cross-compile.  We use "
"the <parameter>--host=$LFS_TGT</parameter> option to make the build system "
"to use those tools prefixed with <literal>$LFS_TGT-</literal>, and the "
"<parameter>--build=$(../scripts/config.guess)</parameter> option to enable "
"<quote>the cross-compilation mode</quote> as we've discussed.  The "
"<envar>DESTDIR</envar> variable is used to force installation into the LFS "
"file system."
msgstr ""
"下一步安装 Glibc。正如前文所述，我们使用 <parameter>--host=$LFS_TGT</"
"parameter> 选项以保证构建系统使用那些带有 <literal>$LFS_TGT-</literal> 前缀的"
"工具，并使用 <parameter>--build=$(../scripts/config.guess)</parameter> 选项启"
"用<quote>交叉编译模式</quote>。最后，我们使用 <envar>DESTDIR</envar> 变量，将"
"构建得到的 Glibc 强制安装到 LFS 文件系统中。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"As mentioned above, the standard C++ library is compiled next, followed in "
"<xref linkend=\"chapter-temporary-tools\"/> by other programs that must be "
"cross-compiled to break circular dependencies at build time.  The steps for "
"those packages are similar to the steps for glibc."
msgstr ""
"正如前文所述，接下来构建 C++ 标准库，然后是<xref linkend=\"chapter-temporary-"
"tools\"/>中的其他程序，必须交叉编译这些程序才能打破构建时的循环依赖。构建并安"
"装这些软件包的步骤类似构建并安装 glibc。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"At the end of <xref linkend=\"chapter-temporary-tools\"/> the native LFS "
"compiler is installed. First binutils-pass2 is built, in the same "
"<envar>DESTDIR</envar> directory as the other programs, then the second pass "
"of gcc is constructed, omitting some non-critical libraries."
msgstr ""
"在<xref linkend=\"chapter-temporary-tools\"/>的末尾，构建 LFS 本地编译器。首"
"先使用和其他程序相同的 <envar>DESTDIR</envar> 第二次构建 binutils，然后第二次"
"构建 GCC，构建时省略一些不重要的库。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Upon entering the chroot environment in <xref linkend=\"chapter-chroot-"
"temporary-tools\"/>, the temporary installations of programs needed for the "
"proper operation of the toolchain are performed. From this point onwards, "
"the core toolchain is self-contained and self-hosted. In <xref "
"linkend=\"chapter-building-system\"/>, final versions of all the packages "
"needed for a fully functional system are built, tested, and installed."
msgstr ""
"在<xref linkend=\"chapter-chroot-temporary-tools\"/>中，进入 chroot 环境后，"
"临时性地安装工具链的正常工作所必须的程序。此后，核心工具链成为自包含的本地工"
"具链。在<xref linkend=\"chapter-building-system\"/>中，构建，测试，并最终安装"
"所有软件包，它们组成功能完整的系统。"
