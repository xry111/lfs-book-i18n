msgid ""
msgstr ""
"Project-Id-Version: Linux From Scratch 11.4\n"
"Report-Msgid-Bugs-To: lfs-dev@lists.linuxfromscratch.org\n"
"POT-Creation-Date: 2024-02-28 01:01+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Xi Ruoyao <xry111@xry111.site>\n"
"Language-Team: none\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Pootle-Revision: 9999999\n"
"X-Pootle-Path: /zh_CN/lfs/part3intro/toolchaintechnotes.po\n"
"X-Generator: Translate Toolkit 2.2.5\n"

#. type: Content of: <sect1><title>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Toolchain Technical Notes"
msgstr "工具链技术说明"

#. type: Content of: <sect1><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"This section explains some of the rationale and technical details behind the "
"overall build method. Don't try to immediately understand everything in this "
"section. Most of this information will be clearer after performing an actual "
"build. Come back and re-read this chapter at any time during the build "
"process."
msgstr ""
"本节综合地解释构建方法中的逻辑和技术细节。不要试图立刻理解本节的所有内容。在"
"实际完成一次系统构建后，可以更容易地理解本节。在整个构建过程中，您随时可以重"
"新阅读本节。"

#. type: Content of: <sect1><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The overall goal of <xref linkend=\"chapter-cross-tools\"/> and <xref "
"linkend=\"chapter-temporary-tools\"/> is to produce a temporary area "
"containing a set of tools that are known to be good, and that are isolated "
"from the host system.  By using the <command>chroot</command> command, the "
"compilations in the remaining chapters will be isolated within that "
"environment, ensuring a clean, trouble-free build of the target LFS system. "
"The build process has been designed to minimize the risks for new readers, "
"and to provide the most educational value at the same time."
msgstr ""
"<xref linkend=\"chapter-cross-tools\"/>和<xref linkend=\"chapter-temporary-"
"tools\"/>的总目标是构造一个临时环境，它包含一组可靠的，能够与宿主系统完全分离"
"的工具。这样，通过使用 <command>chroot</command> 命令，其余各章中执行的命令就"
"被限制在这个临时环境中。这确保我们能够干净、顺利地构建 LFS 系统。整个构建过程"
"被的设计目标是尽量降低新读者可能面临的风险，同时提供尽可能多的教育价值。"

#. type: Content of: <sect1><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"This build process is based on <emphasis>cross-compilation</emphasis>. Cross-"
"compilation is normally used to build a compiler and its associated "
"toolchain for a machine different from the one that is used for the build. "
"This is not strictly necessary for LFS, since the machine where the new "
"system will run is the same as the one used for the build. But cross-"
"compilation has one great advantage: anything that is cross-compiled cannot "
"depend on the host environment."
msgstr ""
"构建过程是基于<emphasis>交叉编译</emphasis>过程的。交叉编译通常被用于为一台与"
"本机完全不同的计算机构建编译器及其工具链。这对于 LFS 并不严格必要，因为新系统"
"运行的机器就是构建它时使用的。但是，交叉编译拥有一项重要优势：任何交叉编译产"
"生的程序都不可能依赖于宿主环境。"

#. type: Content of: <sect1><sect2><title>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "About Cross-Compilation"
msgstr "关于交叉编译"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The LFS book is not (and does not contain) a general tutorial to build a "
"cross- (or native) toolchain. Don't use the commands in the book for a cross-"
"toolchain for some purpose other than building LFS, unless you really "
"understand what you are doing."
msgstr ""
"LFS 手册并不是 (也不包含) 一份通用的，构建交叉 (或本地) 工具链的指南。除非您"
"完全明白自己在干什么，请勿使用手册中的命令构建交叉工具链并用于构建 LFS 以外的"
"用途。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Cross-compilation involves some concepts that deserve a section of their "
"own. Although this section may be omitted on a first reading, coming back to "
"it later will help you gain a fuller understanding of the process."
msgstr ""
"交叉编译涉及一些概念，值得专门用一节讨论。尽管您可以在初次阅读时跳过本节，但"
"在之后重新阅读本节，能帮助您更全面地理解构建过程。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Let us first define some terms used in this context."
msgstr "首先我们定义讨论交叉编译时常用的术语。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "The build"
msgstr "build"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
#, fuzzy
#| msgid ""
#| "is the machine where we build programs. Note that this machine is also "
#| "referred to as the <quote>host</quote>."
msgid ""
"is the machine where we build programs. Note that this machine is also "
"referred to as the <quote>host.</quote>"
msgstr ""
"指构建程序时使用的机器。注意在某些其他章节，这台机器被称为<quote>host</"
"quote>(宿主)。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "The host"
msgstr "host"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"is the machine/system where the built programs will run. Note that this use "
"of <quote>host</quote> is not the same as in other sections."
msgstr ""
"指将来会运行被构建的程序的机器。注意这里说的<quote>host</quote>与其他章节使用"
"的“宿主”(host) 一词不同。"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><term>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "The target"
msgstr "target"

#. type: Content of: <sect1><sect2><variablelist><varlistentry><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"is only used for compilers. It is the machine the compiler produces code "
"for. It may be different from both the build and the host."
msgstr ""
"只有编译器使用这个术语。编译器为这台机器产生代码。它可能和 build 与 host 都不"
"同。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"As an example, let us imagine the following scenario (sometimes referred to "
"as <quote>Canadian Cross</quote>). We have a compiler on a slow machine "
"only, let's call it machine A, and the compiler ccA. We also have a fast "
"machine (B), but no compiler for (B), and we want to produce code for a "
"third, slow machine (C). We will build a compiler for machine C in three "
"stages."
msgstr ""
"例如，我们考虑下列场景 (有时称为<quote>Canadian Cross</quote>)。我们仅在一台"
"运行缓慢的机器上有编译器，称这台机器为 A，这个编译器为 ccA。我们还有一台运行"
"较快的机器 (B)，但它没有安装编译器，而我们希望为另一台缓慢的机器 (C) 生成代"
"码。如果要为 C 构建编译器，可以通过三个阶段完成："

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Stage"
msgstr "阶段"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Build"
msgstr "Build"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Host"
msgstr "Host"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Target"
msgstr "Target"

#. type: Content of: <sect1><sect2><informaltable><tgroup><thead><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Action"
msgstr "操作描述"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "1"
msgstr "1"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "A"
msgstr "A"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "B"
msgstr "B"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Build cross-compiler cc1 using ccA on machine A."
msgstr "在机器 A 上，使用 ccA 构建交叉编译器 cc1"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "2"
msgstr "2"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "C"
msgstr "C"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Build cross-compiler cc2 using cc1 on machine A."
msgstr "在机器 A 上，使用 cc1 构建交叉编译器 cc2"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "3"
msgstr "3"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Build compiler ccC using cc2 on machine B."
msgstr "在机器 B 上，使用 cc2 构建交叉编译器 ccC"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Then, all the programs needed by machine C can be compiled using cc2 on the "
"fast machine B. Note that unless B can run programs produced for C, there is "
"no way to test the newly built programs until machine C itself is running. "
"For example, to run a test suite on ccC, we may want to add a fourth stage:"
msgstr ""
"这样，我们可以为机器 C 使用 cc2 在快速的机器 B 上构建所有其他程序。需要注意的"
"是，除非 B 能运行为 C 编译的程序，则在 C 上实际运行它们之前，无法测试它们的功"
"能。例如，如果要测试 ccC，我们可能需要增加第四个阶段："

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "4"
msgstr "4"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Rebuild and test ccC using ccC on machine C."
msgstr "在机器 C 上，用 ccC 重新构建它本身，并测试"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"In the example above, only cc1 and cc2 are cross-compilers, that is, they "
"produce code for a machine different from the one they are run on.  The "
"other compilers ccA and ccC produce code for the machine they are run on. "
"Such compilers are called <emphasis>native</emphasis> compilers."
msgstr ""
"在上面的例子中，只有 cc1 和 cc2 是交叉编译器，它们为与它们本身运行的机器不同"
"的机器产生代码。而另外的编译器 ccA 和 ccC 为它们本身运行的机器产生代码，它们"
"称为<emphasis>本地</emphasis>编译器。"

#. type: Content of: <sect1><sect2><title>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Implementation of Cross-Compilation for LFS"
msgstr "LFS 的交叉编译实现"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"All the cross-compiled packages in this book use an autoconf-based building "
"system.  The autoconf-based building system accepts system types in the form "
"cpu-vendor-kernel-os, referred to as the system triplet.  Since the vendor "
"field is often irrelevant, autoconf lets you omit it."
msgstr ""
"本书中涉及交叉编译的软件包都使用基于 autoconf 的构建系统。基于 autoconf 的构"
"建系统使用形如 CPU-供应商-内核-操作系统，称为三元组的名称表示目标系统类型。由"
"于供应商字段通常无关紧要，autoconf 允许省略它。"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"An astute reader may wonder why a <quote>triplet</quote> refers to a four "
"component name. The kernel field and the os field began as a single "
"<quote>system</quote> field.  Such a three-field form is still valid today "
"for some systems, for example, <literal>x86_64-unknown-freebsd</literal>.  "
"But two systems can share the same kernel and still be too different to use "
"the same triplet to describe them.  For example, Android running on a mobile "
"phone is completely different from Ubuntu running on an ARM64 server, even "
"though they are both running on the same type of CPU (ARM64) and using the "
"same kernel (Linux)."
msgstr ""
"好奇的读者可能会问，为什么一个<quote>三元组</quote>却包含四个部分。这是由于内"
"核和操作系统两个字段起源于一个<quote>系统</quote>字段。至今，一些系统仍然用三"
"字段的格式准确描述，例如，<literal>x86_64-unknown-freebsd</literal>。但是对于"
"其他一些系统，即使两个系统使用相同的内核，它们也可能截然不同，以至于不能使用"
"相同的三元组。例如，运行在智能手机的 Android 和运行在 ARM64 服务器的 Ubuntu "
"完全不同，尽管它们使用相同类型的 CPU (ARM64) 和相同的内核 (Linux)。"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Without an emulation layer, you cannot run an executable for a server on a "
"mobile phone or vice versa.  So the <quote>system</quote> field has been "
"divided into kernel and os fields, to designate these systems "
"unambiguously.  In our example, the Android system is designated "
"<literal>aarch64-unknown-linux-android</literal>, and the Ubuntu system is "
"designated <literal>aarch64-unknown-linux-gnu</literal>."
msgstr ""
"在没有仿真中间层的情况下，显然不能在智能手机上运行用于服务器的可执行文件，反"
"之亦然。因此，<quote>系统</quote> 字段被拆分为内核和操作系统两部分，以准确区"
"分这些系统。对于本例，Android 被表示为 <literal>aarch64-unknown-linux-"
"android</literal>，而 Ubuntu 被表示为 <literal>aarch64-unknown-linux-gnu</"
"literal>。"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The word <quote>triplet</quote> remains embedded in the lexicon. A simple "
"way to determine your system triplet is to run the <command>config.guess</"
"command> script that comes with the source for many packages. Unpack the "
"binutils sources, run the script <userinput>./config.guess</userinput>, and "
"note the output. For example, for a 32-bit Intel processor the output will "
"be <emphasis>i686-pc-linux-gnu</emphasis>. On a 64-bit system it will be "
"<emphasis>x86_64-pc-linux-gnu</emphasis>. On most Linux systems the even "
"simpler <command>gcc -dumpmachine</command> command will give you similar "
"information."
msgstr ""
"<quote>三元组</quote>这个词汇被沿用下来。有一种简单方法可以获得您的机器的三元"
"组，即运行许多软件包附带的 <command>config.guess</command> 脚本。解压缩 "
"binutils 源码，然后输入 <userinput>./config.guess</userinput> 运行脚本，并观"
"察输出。例如，对于 32 位 Intel 处理器，输出应该是 <emphasis>i686-pc-linux-"
"gnu</emphasis>。而在 64 位系统上输出应该是 <emphasis>x86_64-pc-linux-gnu</"
"emphasis>。在许多 Linux 系统上，更简单的 <command>gcc -dumpmachine</command> "
"命令也会输出类似的信息。"

#. type: Content of: <sect1><sect2><note><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"You should also be aware of the name of the platform's dynamic linker, often "
"referred to as the dynamic loader (not to be confused with the standard "
"linker <command>ld</command> that is part of binutils). The dynamic linker "
"provided by package glibc finds and loads the shared libraries needed by a "
"program, prepares the program to run, and then runs it. The name of the "
"dynamic linker for a 32-bit Intel machine is <filename "
"class=\"libraryfile\">ld-linux.so.2</filename>; it's <filename "
"class=\"libraryfile\">ld-linux-x86-64.so.2</filename> on 64-bit systems. A "
"sure-fire way to determine the name of the dynamic linker is to inspect a "
"random binary from the host system by running: <userinput>readelf -l &lt;"
"name of binary&gt; | grep interpreter</userinput> and noting the output. The "
"authoritative reference covering all platforms is in the <filename>shlib-"
"versions</filename> file in the root of the glibc source tree."
msgstr ""
"您还需要注意平台的动态链接器的名称，它又被称为动态加载器 (不要和 Binutils 中"
"的普通链接器 <command>ld</command> 混淆)。动态链接器由 Glibc 提供，它寻找并加"
"载程序所需的共享库，为程序运行做好准备，然后运行程序。在 32 位 Intel 机器上动"
"态链接器的名称是 <filename class=\"libraryfile\">ld-linux.so.2</filename> "
"(在 64 位系统上是 <filename class=\"libraryfile\">ld-linux-x86-64.so.2</"
"filename>)。一个确定动态链接器名称的准确方法是从宿主系统找一个二进制可执行文"
"件，然后执行：<userinput>readelf -l &lt;二进制文件名&gt; | grep interpreter</"
"userinput> 并观察输出。包含所有平台的权威参考可以在 Glibc 源码树根目录的 "
"<filename>shlib-versions</filename> 文件中找到。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"In order to fake a cross-compilation in LFS, the name of the host triplet is "
"slightly adjusted by changing the &quot;vendor&quot; field in the "
"<envar>LFS_TGT</envar> variable so it says &quot;lfs&quot;. We also use the "
"<parameter>--with-sysroot</parameter> option when building the cross-linker "
"and cross-compiler, to tell them where to find the needed host files. This "
"ensures that none of the other programs built in <xref linkend=\"chapter-"
"temporary-tools\"/> can link to libraries on the build machine. Only two "
"stages are mandatory, plus one more for tests."
msgstr ""
"在 LFS 的构建过程中，为了将本机伪装成交叉编译目标机器，我们在 "
"<envar>LFS_TGT</envar> 变量中，将宿主系统三元组的 &quot;vendor&quot; 域修改"
"为 &quot;lfs&quot;。改。我们还会在构建交叉链接器和交叉编译器时使用 "
"<parameter>--with-sysroot</parameter> 选项，指定查找所需的 host 系统文件的位"
"置。这保证在<xref linkend=\"chapter-temporary-tools\"/>中的其他程序在构建时不"
"会链接到宿主 (build) 系统的库。前两个阶段是必要的，第三个阶段可以用于测试："

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "pc"
msgstr "pc"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "lfs"
msgstr "lfs"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Build cross-compiler cc1 using cc-pc on pc."
msgstr "在 pc 上使用 cc-pc 构建交叉编译器 cc1"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Build compiler cc-lfs using cc1 on pc."
msgstr "在 pc 上使用 cc1 构建 cc-lfs"

#. type: Content of: <sect1><sect2><informaltable><tgroup><tbody><row><entry>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Rebuild and test cc-lfs using cc-lfs on lfs."
msgstr "在 lfs 上使用 cc-lfs 重新构建并测试它本身"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"In the preceding table, <quote>on pc</quote> means the commands are run on a "
"machine using the already installed distribution. <quote>On lfs</quote> "
"means the commands are run in a chrooted environment."
msgstr ""
"在上表中，<quote>在 pc 上</quote> 意味着命令在已经安装好的发行版中执行。"
"<quote>在 lfs 上</quote> 意味着命令在 chroot 环境中执行。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"This is not yet the end of the story. The C language is not merely a "
"compiler; it also defines a standard library. In this book, the GNU C "
"library, named glibc, is used (there is an alternative, &quot;musl&quot;). "
"This library must be compiled for the LFS machine; that is, using the cross-"
"compiler cc1.  But the compiler itself uses an internal library providing "
"complex subroutines for functions not available in the assembler instruction "
"set. This internal library is named libgcc, and it must be linked to the "
"glibc library to be fully functional. Furthermore, the standard library for "
"C++ (libstdc++) must also be linked with glibc. The solution to this chicken "
"and egg problem is first to build a degraded cc1-based libgcc, lacking some "
"functionalities such as threads and exception handling, and then to build "
"glibc using this degraded compiler (glibc itself is not degraded), and also "
"to build libstdc++. This last library will lack some of the functionality of "
"libgcc."
msgstr ""
"现在，关于交叉编译，还有更多要处理的问题：C 语言并不仅仅是一个编译器；它还规"
"定了一个标准库。在本书中，我们使用 GNU C 运行库，即 glibc (除此之外，还有名"
"为 &quot;musl&quot; 的另一种 C 运行库实现)。它必须为 lfs 目标机器使用交叉编译"
"器 cc1 编译。但是，编译器本身使用一个库，实现汇编指令集并不支持的一些复杂指"
"令。这个内部库称为 libgcc，它必须链接到 glibc 库才能实现完整功能。另外，C++ "
"标准库 (libstdc++) 也必须链接到 glibc。为了解决这个”先有鸡还是先有蛋“的问题，"
"只能先构建一个降级的 cc1，它的 libgcc 缺失线程和异常等功能，再用这个降级的编"
"译器构建 glibc (这不会导致 glibc 缺失功能)，再构建 libstdc++。但是这种方法构"
"建的 libstdc++ 会缺失一些依赖于 libgcc 的功能。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The upshot of the preceding paragraph is that cc1 is unable to build a fully "
"functional libstdc++ with the degraded libgcc, but cc1 is the only compiler "
"available for building the C/C++ libraries during stage 2. There are two "
"reasons we don't immediately use the compiler built in stage 2, cc-lfs, to "
"build those libraries."
msgstr ""
"上面一段的结论是 cc1 无法使用功能降级的 libgcc 构建功能完整的 libstdc++，但这"
"是我们在阶段 2 构建 C/C++ 库时唯一可用的编译器。两项原因导致我们目前不能用第"
"二阶段构建的编译器，cc-lfs，构建这些库。"

#. type: Content of: <sect1><sect2><itemizedlist><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Generally speaking, cc-lfs cannot run on pc (the host system).  Even though "
"the triplets for pc and lfs are compatible with each other, an executable "
"for lfs must depend on glibc-&glibc-version;; the host distro may utilize "
"either a different implementation of libc (for example, musl), or a previous "
"release of glibc (for example, glibc-2.13)."
msgstr ""
"一般来说，cc-lfs 不能在 pc (宿主系统) 上运行。尽管 pc 和 lfs 的三元组互相兼"
"容，为 lfs 构建的可执行文件会依赖于 glibc-&glibc-version;；而宿主系统可能使用"
"不同的 libc 实现 (例如，musl) 或较旧的 glibc 版本 (例如，glibc-2.13)。"

#. type: Content of: <sect1><sect2><itemizedlist><listitem><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Even if cc-lfs can run on pc, using it on pc would create a risk of linking "
"to the pc libraries, since cc-lfs is a native compiler."
msgstr ""
"即使 cc-lfs 能在 pc 上运行，在 pc 上使用它可能产生链接到 pc (宿主系统) 库的风"
"险，因为 cc-lfs 是一个本地编译器。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"So when we build gcc stage 2, we instruct the building system to rebuild "
"libgcc and libstdc++ with cc1, but we link libstdc++ to the newly rebuilt "
"libgcc instead of the old, degraded build.  This makes the rebuilt libstdc++ "
"fully functional."
msgstr ""
"因此在第二阶段构建 gcc 时，我们指示构建系统使用 cc1 再次构建 libgcc 和 "
"libstdc++，但是将 libstdc++ 链接到刚刚重新构建的 libgcc，而不是旧的，功能降级"
"的版本。这样重新构建的 libstdc++ 就会具有完整的功能。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"In &ch-final; (or <quote>stage 3</quote>), all the packages needed for the "
"LFS system are built. Even if a package has already been installed into the "
"LFS system in a previous chapter, we still rebuild the package.  The main "
"reason for rebuilding these packages is to make them stable: if we reinstall "
"an LFS package on a completed LFS system, the reinstalled content of the "
"package should be the same as the content of the same package when first "
"installed in &ch-final;.  The temporary packages installed in &ch-tmp-cross; "
"or &ch-tmp-chroot; cannot satisfy this requirement, because some of them are "
"built without optional dependencies, and autoconf cannot perform some "
"feature checks in &ch-tmp-cross; because of cross-compilation, causing the "
"temporary packages to lack optional features, or use suboptimal code "
"routines. Additionally, a minor reason for rebuilding the packages is to run "
"the test suites."
msgstr ""
"在&ch-final; (或者也可以称为“第三阶段”) 中，我们会构建 LFS 需要的所有软件包。"
"即使某个软件包在之前的章节已被构建，我们仍然重新构建它。重新构建的最主要原因"
"是将软件包稳定下来：如果我们在完整的 LFS 系统上重新安装一个 LFS 软件包，则c重"
"新安装到系统中的内容应该和&ch-final;中初次安装的完全一致。&ch-tmp-cross;和"
"&ch-tmp-chroot;中的临时软件包无法满足这一条件，因为其中一些软件包在构建时缺失"
"可选依赖项，另外在&ch-tmp-cross;中由于进行交叉编译，autoconf 无法进行一些系统"
"特性探测，导致临时软件包缺失可选功能，或使用非最优的子程序。另外，进行重新构"
"建还有一个次要原因，即运行软件包的测试套件。"

#. type: Content of: <sect1><sect2><title>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid "Other Procedural Details"
msgstr "构建过程的其他细节"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The cross-compiler will be installed in a separate <filename "
"class=\"directory\">$LFS/tools</filename> directory, since it will not be "
"part of the final system."
msgstr ""
"交叉编译器会被安装在独立的 <filename class=\"directory\">$LFS/tools</"
"filename> 目录，因为它不属于最终构建的系统。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Binutils is installed first because the <command>configure</command> runs of "
"both gcc and glibc perform various feature tests on the assembler and linker "
"to determine which software features to enable or disable. This is more "
"important than one might realize at first. An incorrectly configured gcc or "
"glibc can result in a subtly broken toolchain, where the impact of such "
"breakage might not show up until near the end of the build of an entire "
"distribution. A test suite failure will usually highlight this error before "
"too much additional work is performed."
msgstr ""
"我们首先安装 Binutils。这是由于 GCC 和 Glibc 的 <command>configure</command> "
"脚本首先测试汇编器和链接器的一些特性，以决定启用或禁用一些软件特性。初看起来"
"这并不重要，但没有正确配置的 GCC 或者 Glibc 会导致工具链中潜伏的故障。这些故"
"障可能到整个构建过程快要结束时才突然爆发，不过在花费大量无用功之前，测试套件"
"的失败通常可以将这类错误暴露出来。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Binutils installs its assembler and linker in two locations, <filename "
"class=\"directory\">$LFS/tools/bin</filename> and <filename "
"class=\"directory\">$LFS/tools/$LFS_TGT/bin</filename>. The tools in one "
"location are hard linked to the other. An important facet of the linker is "
"its library search order. Detailed information can be obtained from "
"<command>ld</command> by passing it the <parameter>--verbose</parameter> "
"flag. For example, <command>$LFS_TGT-ld --verbose | grep SEARCH</command> "
"will illustrate the current search paths and their order. (Note that this "
"example can be run as shown only while logged in as user <systemitem "
"class=\"username\">lfs</systemitem>. If you come back to this page later, "
"replace <command>$LFS_TGT-ld</command> with <command>ld</command>)."
msgstr ""
"Binutils 将汇编器和链接器安装在两个位置，一个是 <filename "
"class=\"directory\">$LFS/tools/bin</filename>，另一个是 <filename "
"class=\"directory\">$LFS/tools/$LFS_TGT/bin</filename>。这两个位置中的工具互"
"为硬链接。链接器的一项重要属性是它搜索库的顺序，通过向 <command>ld</command> "
"命令加入 <parameter>--verbose</parameter> 参数，可以得到关于搜索路径的详细信"
"息。例如，<command>ld --verbose | grep SEARCH</command> 会输出当前的搜索路径"
"及其顺序。(注意这条命令只有在以 <systemitem class=\"username\">lfs</"
"systemitem> 用户身份操作时才能正常工作。如果在阅读后续章节的过程中复习这里的"
"内容，可能需要将 <command>$LFS_TGT-ld</command> 替换为 <command>ld</"
"command>。)"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"The next package installed is gcc. An example of what can be seen during its "
"run of <command>configure</command> is:"
msgstr ""
"下一步安装 GCC。在执行它的 <command>configure</command> 脚本时，您会看到类似"
"下面这样的输出："

#. type: Content of: <sect1><sect2><screen>
#: lfs-en/part3intro/toolchaintechnotes.xml
#, no-wrap
msgid ""
"<computeroutput>checking what assembler to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/as\n"
"checking what linker to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/ld</computeroutput>"
msgstr ""
"<computeroutput>checking what assembler to use... /tools/i686-lfs-linux-gnu/bin/as\n"
"checking what linker to use... /mnt/lfs/tools/i686-lfs-linux-gnu/bin/ld</computeroutput>"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"This is important for the reasons mentioned above. It also demonstrates that "
"gcc's configure script does not search the PATH directories to find which "
"tools to use. However, during the actual operation of <command>gcc</command> "
"itself, the same search paths are not necessarily used. To find out which "
"standard linker <command>gcc</command> will use, run: <command>$LFS_TGT-gcc -"
"print-prog-name=ld</command>. (Again, remove the <command>$LFS_TGT-</"
"command> prefix if coming back to this later.)"
msgstr ""
"基于我们上面论述的原因，这些输出非常重要。这也说明 gcc 的配置脚本没有在 PATH "
"变量指定的目录中搜索工具。然而，在 <command>gcc</command> 的实际运行中，未必"
"会使用同样的搜索路径。为了查询 <command>gcc</command> 会使用哪个链接器，需要"
"执行以下命令：<command>$LFS_TGT-gcc -print-prog-name=ld</command>。(同样，如"
"果在阅读后续章节的过程中复习这里的内容，可能需要移除命令中的 "
"<command>$LFS_TGT-</command> 前缀。)"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Detailed information can be obtained from <command>gcc</command> by passing "
"it the <parameter>-v</parameter> command line option while compiling a "
"program. For example, <command>$LFS_TGT-gcc -v <replaceable>example.c</"
"replaceable></command> (or without <command> $LFS_TGT-</command> if coming "
"back later) will show detailed information about the preprocessor, "
"compilation, and assembly stages, including <command>gcc</command>'s search "
"paths for included headers and their order."
msgstr ""
"通过向 <command>gcc</command> 传递 <parameter>-v</parameter> 参数，可以知道在"
"编译程序时发生的细节。例如，<command>$LFS_TGT-gcc -v <replaceable>example.c</"
"replaceable></command> (如果在复习这里的内容，可能需要移除 "
"<command>$LFS_TGT</command>) 会输出预处理、编译和汇编阶段中的详细信息，包括 "
"<command>gcc</command> 的包含文件搜索路径和顺序。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Next up: sanitized Linux API headers. These allow the standard C library "
"(glibc) to interface with features that the Linux kernel will provide."
msgstr ""
"下一个步骤是：安装“净化的” (sanitized) Linux API 头文件。这些头文件允许 C 标"
"准库 (glibc) 与 Linux 内核提供的各种特性交互。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Next comes glibc. The most important considerations for building glibc are "
"the compiler, binary tools, and kernel headers. The compiler is generally "
"not an issue since glibc will always use the compiler relating to the "
"<parameter>--host</parameter> parameter passed to its configure script; e."
"g., in our case, the compiler will be <command>$LFS_TGT-gcc</command>. The "
"binary tools and kernel headers can be a bit more complicated. Therefore, we "
"take no risks and use the available configure switches to enforce the "
"correct selections. After the run of <command>configure</command>, check the "
"contents of the <filename>config.make</filename> file in the <filename "
"class=\"directory\">build</filename> directory for all important details.  "
"Note the use of <parameter>CC=\"$LFS_TGT-gcc\"</parameter> (with "
"<envar>$LFS_TGT</envar> expanded) to control which binary tools are used and "
"the use of the <parameter>-nostdinc</parameter> and <parameter>-isystem</"
"parameter> flags to control the compiler's include search path. These items "
"highlight an important aspect of the glibc package&mdash;it is very self-"
"sufficient in terms of its build machinery, and generally does not rely on "
"toolchain defaults."
msgstr ""
"下一步安装 Glibc。在构建 Glibc 时需要着重考虑编译器，二进制工具，以及内核头文"
"件。编译器一般不成问题，Glibc 总是使用传递给配置脚本的 <parameter>--host</"
"parameter> 参数相关的编译器。例如，在我们的例子中，使用的编译器是 "
"<command>$LFS_TGT-gcc</command>。但二进制工具和内核头文件的问题比较复杂。我们"
"为了安全起见，使用配置脚本提供的开关以确保正确选择。在 <command>configure</"
"command> 脚本运行完成后，可以检查 <filename>build</filename> 目录中的 "
"<filename>config.make</filename> 文件，了解全部重要的细节。注意参数 "
"<parameter>CC=\"$LFS_TGT-gcc\"</parameter> (其中 <envar>$LFS_TGT</envar> 会被"
"展开) 控制构建系统使用正确的二进制工具，而参数 <parameter>-nostdinc</"
"parameter> 和 <parameter>-isystem</parameter> 控制编译器的包含文件搜索路径。"
"这些事项凸显了 Glibc 软件包的一个重要性质 —— 它的构建机制是相当自给自足的，通"
"常不依赖于工具链默认值。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"As mentioned above, the standard C++ library is compiled next, followed in "
"<xref linkend=\"chapter-temporary-tools\"/> by other programs that must be "
"cross-compiled to break circular dependencies at build time.  The install "
"step of all those packages uses the <envar>DESTDIR</envar> variable to force "
"installation in the LFS filesystem."
msgstr ""
"正如前文所述，接下来构建 C++ 标准库，然后是<xref linkend=\"chapter-temporary-"
"tools\"/>中的其他程序，必须交叉编译这些程序才能打破构建时的循环依赖。在安装这"
"些软件包时使用 <envar>DESTDIR</envar> 变量，以确保将它们安装到 LFS 文件系统"
"中。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"At the end of <xref linkend=\"chapter-temporary-tools\"/> the native LFS "
"compiler is installed. First binutils-pass2 is built, in the same "
"<envar>DESTDIR</envar> directory as the other programs, then the second pass "
"of gcc is constructed, omitting some non-critical libraries.  Due to some "
"weird logic in gcc's configure script, <envar>CC_FOR_TARGET</envar> ends up "
"as <command>cc</command> when the host is the same as the target, but "
"different from the build system. This is why "
"<parameter>CC_FOR_TARGET=$LFS_TGT-gcc</parameter> is declared explicitly as "
"one of the configuration options."
msgstr ""
"在<xref linkend=\"chapter-temporary-tools\"/>的末尾，构建 LFS 本地编译器。首"
"先使用和其他程序相同的 <envar>DESTDIR</envar> 第二次构建 binutils，然后第二次"
"构建 GCC，构建时忽略一些不重要的库。由于 GCC 配置脚本的一些奇怪逻辑，"
"<envar>CC_FOR_TARGET</envar> 变量在 host 系统和 target 相同，但与 build 不同"
"时，被设定为 <command>cc</command>。因此我们必须显式地在配置选项中指定 "
"<parameter>CC_FOR_TARGET=$LFS_TGT-gcc</parameter>。"

#. type: Content of: <sect1><sect2><para>
#: lfs-en/part3intro/toolchaintechnotes.xml
msgid ""
"Upon entering the chroot environment in <xref linkend=\"chapter-chroot-"
"temporary-tools\"/>, the temporary installations of programs needed for the "
"proper operation of the toolchain are performed. From this point onwards, "
"the core toolchain is self-contained and self-hosted. In <xref "
"linkend=\"chapter-building-system\"/>, final versions of all the packages "
"needed for a fully functional system are built, tested, and installed."
msgstr ""
"在<xref linkend=\"chapter-chroot-temporary-tools\"/>中，进入 chroot 环境后，"
"临时性地安装工具链的正常工作所必须的程序。此后，核心工具链成为自包含的本地工"
"具链。在<xref linkend=\"chapter-building-system\"/>中，构建，测试，并最终安装"
"所有软件包，它们组成功能完整的系统。"
